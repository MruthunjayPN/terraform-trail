terraform {
  required_providers {
    local = {
      source  = "hashicorp/local"
      version = "~>2.0"
    }
  }
}

# Create project directory structure
resource "local_file" "project_structure" {
  for_each = toset([
    "config",
    "logs", 
    "data",
    "scripts"
  ])
  
  content  = "# ${each.key} directory for ${var.project_name}-${var.environment}\nCreated by Terraform"
  filename = "${path.module}/${var.project_name}-${var.environment}/${each.key}/README.md"
  file_permission = var.file_permissions
}

# Create configuration file
resource "local_file" "app_config" {
  content = templatefile("${path.module}/config.tpl", {
    project_name = var.project_name
    environment  = var.environment
    port        = var.config_settings.port
    debug_mode  = var.config_settings.debug_mode
    max_users   = var.config_settings.max_users
  })
  filename = "${path.module}/${var.project_name}-${var.environment}/config/app.conf"
  file_permission = var.file_permissions
}

# Create team access file
resource "local_file" "team_access" {
  count = length(var.team_members)
  
  content = templatefile("${path.module}/user.tpl", {
    username    = var.team_members[count.index]
    project     = var.project_name
    environment = var.environment
    access_level = count.index == 0 ? "admin" : "developer"
  })
  filename = "${path.module}/${var.project_name}-${var.environment}/config/users/${var.team_members[count.index]}.conf"
  file_permission = var.file_permissions
}

# Conditional resource - backup files
resource "local_file" "backup_script" {
  count = var.create_backup ? 1 : 0
  
  content = <<-EOF
#!/bin/bash
# Backup script for ${var.project_name}-${var.environment}
# Generated by Terraform

PROJECT="${var.project_name}"
ENV="${var.environment}"
BACKUP_DATE=$(date +%Y%m%d_%H%M%S)

echo "Starting backup for $PROJECT-$ENV at $BACKUP_DATE"
# Add your backup commands here
echo "Backup completed successfully"
EOF

  filename = "${path.module}/${var.project_name}-${var.environment}/scripts/backup.sh"
  file_permission = "0755"  # Executable
}

# Data source to read existing file (if it exists)
data "local_file" "existing_config" {
  count    = fileexists("${path.module}/existing.conf") ? 1 : 0
  filename = "${path.module}/existing.conf"
}